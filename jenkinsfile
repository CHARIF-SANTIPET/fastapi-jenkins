pipeline {
    agent {
        docker { 
            image 'python:3.11' 
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock' 
        }
    }
    environment {
        SONARQUBE = credentials('sonar-token')
        SCANNER_HOME = tool 'SonarQubeScanner'
    }    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/CHARIF-SANTIPET/fastapi-jenkins.git'
            }
        }
    stage('System deps for SonarScanner') {
      steps {
        sh '''
          apt-get update
          apt-get install -y --no-install-recommends default-jre-headless ca-certificates
          java -version
        '''
      }
    }
        stage('Install Dependencies') {
            steps {
                sh '''
                python -m venv venv
                . venv/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                '''
            }
        }
        stage('Run Tests & Coverage') {
            steps {
                sh '''
                . venv/bin/activate
                pytest --cov=app tests/
                '''
            }
        }
         stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh """
                    ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=fastApi-app \
                        -Dsonar.projectName='fastApi-app' \
                        -Dsonar.sources=./app \
                        -Dsonar.host.url=http://172.19.0.2:9000 \
                        -Dsonar.token=sqp_afad80ac9241b275998b9c8ca9b6e7eb60ec8a09
                    """    
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t fastapi-app:latest .'
            }
        }
        stage('Deploy Container') {
            steps {
                sh 'docker run -d -p 8000:8000 fastapi-app:latest'
            }
        }
    }
    post {
        always {
            echo "Pipeline finished"
        }
    }
}
