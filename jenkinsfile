pipeline {
    agent {
        docker { 
            image 'python:3.11' 
            args '-v /var/run/docker.sock:/var/run/docker.sock' 
        }
    }
    environment {
        SONARQUBE = credentials('sonar-token')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/CHARIF-SANTIPET/fastapi-jenkins.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                sh '''
                python -m venv venv
                . venv/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                '''
            }
        }
        stage('Run Tests & Coverage') {
            steps {
                sh '''
                . venv/bin/activate
                pytest --cov=app tests/
                '''
            }
        }
        stage('Install jdk') {
            step {
                sh '''
                    apt-get update
                    apt-get install -y openjdk-17-jdk
                    java -version
                '''
            }
        }
           stage('SonarQube Analysis') {
      steps {
        script {
          def scannerHome = tool name: 'SonarQubeScanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
          withSonarQubeEnv('SonarQube') {
            withCredentials([string(credentialsId: 'sonar-token', variable: 'sonar-token')]) {
              sh """
                ${scannerHome}/bin/sonar-scanner \
                  -Dsonar.projectKey=fastApi-app \
                  -Dsonar.projectName=fastApi-app \
                  -Dsonar.sources=./app \
                  -Dsonar.token=$SONARQUBE
              """
            }
          }
        }
      }
    }
        stage('Build Docker Image') {
            steps {
                sh 'docker build -t fastapi-app:latest .'
            }
        }
        stage('Deploy Container') {
            steps {
                sh 'docker run -d -p 8000:8000 fastapi-app:latest'
            }
        }
    }
    post {
        always {
            echo "Pipeline finished"
        }
    }
}
